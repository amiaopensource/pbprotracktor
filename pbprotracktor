#!/usr/bin/env bash

SCRIPTDIR=$(dirname $(which "${0}"))
SCRIPTNAME=$(basename "${0}")

if [[ "${SCRIPTDIR}" = "/usr/local/bin" ]] ; then
    VERSION=$(TMP=$(brew info ${SCRIPTNAME} | grep -Eo "/${SCRIPTNAME}/.* \(") ; echo ${TMP:${#SCRIPTNAME}+2:(${#TMP}-${#SCRIPTNAME}-4)})
else
    VERSION=""
fi

CONF_FILE="${SCRIPTDIR}/pbpro.conf"

if [ ! -f "${CONF_FILE}" ] ; then
    echo "A configuration file is needed."
    echo "Please edit ${CONF_FILE}"
    {
        echo "PROTRACK_DB_URL="
        echo "PROTRACK_DB_USER="
        echo "RESOURCESPACE_DB_HOST="
        echo "RESOURCESPACE_DB_NAME="
        echo "RESOURCESPACE_DB_USER="
        echo "RESOURCESPACE_DB_PW="
    } > "${CONF_FILE}"
    exit 1
fi

. "${CONF_FILE}" || { echo "Missing ${CONF_FILE}. Exiting." ; exit 1 ; }

if [[ -z "${PROTRACK_DB_URL}" || -z "${PROTRACK_DB_USER}" ]] ; then
    >&2 echo "Please set info for the postgres connection in ${CONF_FILE}."
    exit 1
fi

_usage(){
    cat <<EOF
${SCRIPTNAME} ${VERSION}

This utility will format data from ProTrack into PBCore by the instantiation
media ID.

Dependencies: xmlstarlet (xml), psql

Usage: ${SCRIPTNAME} [-a] [-c] {file_or_package} | -h
  -a  return all instantiations per asset, rather than only the called one
  -c  transform XML output into CSV
  -h  display this help
EOF
}

OPTIND=1
while getopts ":ach" OPT ; do
    case "${OPT}" in
        a) ALL_INST="Y" ;;
        c) CSV="Y" ;;
        h) _usage ; exit 0 ;;
        *) echo "bad option -${OPTARG}" ; _usage ; exit 1 ;;
    esac
done
shift $(( ${OPTIND} - 1 ))

if [[ "${#}" = 0 ]] ; then
  _usage
  exit 1
fi

if [[ "${ALL_INST}" = "Y" ]] ; then
    INSTANTIATION_CALL="(SELECT XMLAGG (
                        XMLELEMENT(NAME \"pbcoreInstantiation\",
                            XMLELEMENT(NAME \"instantiationIdentifier\",
                                XMLATTRIBUTES('li_serial' as \"source\"),
                                li_serial),
                            XMLELEMENT(NAME \"instantiationIdentifier\",
                                XMLATTRIBUTES('Media ID' as \"source\"),
                                trim(li_material_id)),
                            CASE WHEN li_cart_id is not null THEN
                            XMLELEMENT(NAME \"instantiationIdentifier\",
                                XMLATTRIBUTES('Cart ID' as \"source\"),
                                trim(li_cart_id))
                            END,
                            XMLELEMENT(NAME \"instantiationDate\",
                                XMLATTRIBUTES('availableStart' as \"dateType\"),
                                li_start_date),
                            XMLELEMENT(NAME \"instantiationDate\",
                                XMLATTRIBUTES(
                                    'availableEnd' as \"dateType\",
                                    ':-/' as \"annotation\"
                                ),
                                li_end_date),
                            XMLELEMENT(NAME \"instantiationLocation\"),
                            XMLELEMENT(NAME \"instantiationTimeStart\",li_in_char),
                            XMLELEMENT(NAME \"instantiationDuration\",li_length_char),
                            CASE WHEN li_use_for_air = 0 THEN
                                XMLELEMENT(NAME \"instantiationAnnotation\",
                                    XMLATTRIBUTES('accessRestriction' as \"annotationType\"),
                                    'Restricted')
                            END,
                            CASE WHEN li_cart_id is not null THEN
                                XMLELEMENT(NAME \"instantiationAnnotation\",
                                    XMLATTRIBUTES('accessRestriction' as \"annotationType\"),
                                    'Restricted')
                            END,
                            (SELECT
                                CASE WHEN string_agg(no_text,' ') is not null THEN
                                    XMLELEMENT(NAME \"instantiationAnnotation\",
                                        XMLATTRIBUTES('Technical Notes' as \"annotationType\"),
                                        trim(string_agg(no_text,' ' ORDER BY no_sequence ASC)))
                                END
                            FROM notes
                            WHERE notes.no_parent = li_serial AND notes.no_location = 'tapelink'
                            )
                        ) ORDER BY li_material_id ASC)
                    FROM linkinfo WHERE linkinfo.li_vsn_id = quad_tab.vsn_serial
                    )"
else
    INSTANTIATION_CALL="(SELECT XMLAGG (
                        XMLELEMENT(NAME \"pbcoreInstantiation\",
                            XMLELEMENT(NAME \"instantiationIdentifier\",
                                XMLATTRIBUTES('li_serial' as \"source\"),
                                li_serial),
                            XMLELEMENT(NAME \"instantiationIdentifier\",
                                XMLATTRIBUTES('Media ID' as \"source\"),
                                trim(li_material_id)),
                            CASE WHEN li_cart_id is not null THEN
                            XMLELEMENT(NAME \"instantiationIdentifier\",
                                XMLATTRIBUTES('Cart ID' as \"source\"),
                                trim(li_cart_id))
                            END,
                            XMLELEMENT(NAME \"instantiationDate\",
                                XMLATTRIBUTES('availableStart' as \"dateType\"),
                                li_start_date),
                            XMLELEMENT(NAME \"instantiationDate\",
                                XMLATTRIBUTES(
                                    'availableEnd' as \"dateType\",
                                    ':-/' as \"annotation\"
                                ),
                                li_end_date),
                            XMLELEMENT(NAME \"instantiationLocation\"),
                            XMLELEMENT(NAME \"instantiationTimeStart\",li_in_char),
                            XMLELEMENT(NAME \"instantiationDuration\",li_length_char),
                            CASE WHEN li_use_for_air = 0 THEN
                                XMLELEMENT(NAME \"instantiationAnnotation\",
                                    XMLATTRIBUTES('accessRestriction' as \"annotationType\"),
                                    'Restricted')
                            END,
                            CASE WHEN li_cart_id is not null THEN
                                XMLELEMENT(NAME \"instantiationAnnotation\",
                                    XMLATTRIBUTES('accessRestriction' as \"annotationType\"),
                                    'Restricted')
                            END,
                            (SELECT
                                CASE WHEN string_agg(no_text,' ') is not null THEN
                                    XMLELEMENT(NAME \"instantiationAnnotation\",
                                        XMLATTRIBUTES('Technical Notes' as \"annotationType\"),
                                        trim(string_agg(no_text,' ' ORDER BY no_sequence ASC)))
                                END
                            FROM notes
                            WHERE notes.no_parent = li_serial AND notes.no_location = 'tapelink'
                            )
                        ) ORDER BY li_material_id ASC)
                    FROM linkinfo WHERE linkinfo.li_vsn_id = quad_tab.vsn_serial AND linkinfo.li_material_id IN ( $(printf "'%s'," "$@" | sed 's/,$//') )
                    )"
fi

_getpbcore(){
psql -Ath "$PROTRACK_DB_URL" -U "$PROTRACK_DB_USER" -d protrack -c "\
    SELECT
        CASE WHEN pbcore_episodes_xml is not null OR pbcore_filler_xml is not null THEN
            XMLELEMENT(
                NAME \"pbcoreCollection\",
                XMLATTRIBUTES(
                    now() as \"collectionDate\",
                    'http://www.pbcore.org/PBCore/PBCoreNamespace.html' as \"xmlns\"
            ),
            pbcore_episodes_xml,
            pbcore_filler_xml)
        END
    FROM (
        SELECT
            XMLAGG(
                XMLELEMENT(
                    NAME \"pbcoreDescriptionDocument\",\
                    XMLELEMENT(
                        NAME \"pbcoreAssetType\",
                        CASE WHEN ser_type = 'P' THEN 'Program' ELSE 'Episode' END
                    ),
                    (SELECT
                        XMLELEMENT(NAME \"pbcoreAssetDate\",
                            XMLATTRIBUTES(
                                'broadcast' as \"dateType\",
                                'according to ProTrack' as \"annotation\"
                                ),
                            MIN(air.ai_air_strt_inst))
                    FROM air
                    WHERE ai_vsn_id = vsn_serial
                    ),
                    XMLELEMENT(
                        NAME \"pbcoreIdentifier\",
                        XMLATTRIBUTES('NOLA Code' as \"source\"),
                        trim(vsn_nola_code)
                    ),
                    XMLELEMENT(
                        NAME \"pbcoreIdentifier\",
                        XMLATTRIBUTES('vsn_serial' as \"source\"),
                        vsn_serial
                    ),
                    (SELECT
                    CASE WHEN ttl_text is not null THEN
                        XMLELEMENT(NAME \"pbcoreTitle\",
                            XMLATTRIBUTES(CASE WHEN ser_type = 'P' THEN 'Program' ELSE 'Series' END as \"titleType\"),
                            trim(ttl_text))
                    END
                    FROM titles as series_ac_titles
                    WHERE series_ac_titles.ttl_ser_id = quad_tab.ser_serial AND
                        series_ac_titles.ttl_prog_id = '-1' AND
                        series_ac_titles.ttl_type = 'AC'
                    ),
                    CASE WHEN ser_title is not null THEN XMLELEMENT(NAME \"pbcoreTitle\",
                        XMLATTRIBUTES(
                            CASE WHEN ser_type = 'P' THEN 'Program' ELSE 'Series' END as \"titleType\",
                            'unpreserved case' as \"annotation\"
                        ),
                        replace(initcap(trim(ser_title)),chr(39)||'S', chr(39)||'s') )
                    END,
                    (SELECT
                        XMLELEMENT(NAME \"pbcoreTitle\",
                            XMLATTRIBUTES(CASE WHEN ser_type = 'P' THEN 'Subtitle' ELSE 'Episode' END as \"titleType\"),
                            trim(ttl_text))
                    FROM titles AS episode_ac_titles
                    WHERE episode_ac_titles.ttl_prog_id = quad_tab.pg_serial AND
                        episode_ac_titles.ttl_type = 'AC'
                    ),
                    CASE WHEN pg_title is not null THEN
                        XMLELEMENT(NAME \"pbcoreTitle\",
                            XMLATTRIBUTES(
                                CASE WHEN ser_type = 'P' THEN 'Subtitle' ELSE 'Episode' END as \"titleType\",
                                'unpreserved case' as \"annotation\"
                            ),
                            initcap(trim(pg_title)) )
                    END,
                    (SELECT
                        XMLAGG(XMLELEMENT(NAME \"pbcoreDescription\",
                            XMLATTRIBUTES(trim(pgu_location) as \"descriptionType\"),
                            trim(pgu_text))
                        )
                    FROM proguide
                    WHERE pgu_vsn_id = vsn_serial
                    ),
                    (SELECT
                        CASE WHEN string_agg(pde_text,' ') is not null THEN
                            XMLELEMENT(NAME \"pbcoreDescription\",
                                XMLATTRIBUTES('Series' as \"descriptionType\"),
                                trim(string_agg(pde_text,' ' ORDER BY pde_disp_ord ASC)))
                        END
                    FROM progdesc
                    WHERE pde_ser_id = ser_serial AND pde_prog_id = '-1'
                    ),
                    (SELECT
                        CASE WHEN string_agg(pde_text,' ') is not null THEN
                            XMLELEMENT(NAME \"pbcoreDescription\",
                                XMLATTRIBUTES('Notes' as \"descriptionType\"),
                                trim(string_agg(pde_text,' ' ORDER BY pde_disp_ord ASC)))
                        END
                    FROM progdesc
                    WHERE pde_vsn_id = vsn_serial
                    ),
                    CASE WHEN vsn_descript is not null THEN
                        XMLELEMENT(NAME \"pbcoreDescription\",
                            XMLATTRIBUTES(
                                'Version' as \"descriptionType\",
                                'unpreserved case' as \"annotation\"
                            ),
                            initcap(trim(vsn_descript)) )
                    END,
                    ${INSTANTIATION_CALL},
                    CASE WHEN vsn_caption is not null THEN
                        XMLELEMENT(NAME \"pbcoreAnnotation\",
                            XMLATTRIBUTES(
                                'protrack:caption_type' as \"annotationType\"
                            ),
                            trim(vsn_caption))
                    END,
                    (SELECT
                        XMLELEMENT(NAME \"pbcoreAnnotation\",
                            XMLATTRIBUTES(
                                'protrack:episode_caption_exemption' as \"annotationType\"
                            ),
                            trim(ccxmptcd_episode.ccx_text))
                    FROM ccxmptcd AS ccxmptcd_episode
                    LEFT JOIN pgmcodes AS pgmcodes_episode ON ccxmptcd_episode.ccx_code = pgmcodes_episode.pgc_code
                    WHERE pgmcodes_episode.pgc_vsn_id = vsn_serial
                    ),
                    (SELECT
                        XMLELEMENT(NAME \"pbcoreAnnotation\",
                            XMLATTRIBUTES(
                                'protrack:series_caption_exemption' as \"annotationType\"
                            ),
                            trim(ccxmptcd_series.ccx_text))
                    FROM ccxmptcd AS ccxmptcd_series
                    LEFT JOIN pgmcodes AS pgmcodes_series ON ccxmptcd_series.ccx_code = pgmcodes_series.pgc_code
                    WHERE pgmcodes_series.pgc_ser_id = ser_serial
                    LIMIT 1
                    )
                )
            ) as pbcore_episodes_xml
        FROM quad_tab
        WHERE quad_tab.vsn_serial IN (SELECT li_vsn_id FROM linkinfo WHERE li_material_id IN ($(printf "'%s'," "$@" | sed 's/,$//')))
    ) AS pbcore_episodes_result ,
    (
        SELECT
            XMLAGG(
                XMLELEMENT(NAME \"pbcoreDescriptionDocument\",
                    XMLELEMENT(NAME \"pbcoreAssetType\", 'Promo' ),
                    XMLELEMENT(NAME \"pbcoreAssetDate\",
                        XMLATTRIBUTES('catalogued' as \"dateType\"),
                        fi_date ),
                    (SELECT
                        XMLELEMENT(NAME \"pbcoreAssetDate\",
                            XMLATTRIBUTES(
                                'broadcast' as \"dateType\",
                                'according to ProTrack' as \"annotation\"
                                ),
                            MIN(prog_log.log_start_inst))
                    FROM prog_log
                    WHERE log_fi_id = fi_serial
                    ),
                    XMLELEMENT(NAME \"pbcoreIdentifier\",
                        XMLATTRIBUTES('fi_serial' as \"source\"),
                        fi_serial ),
                    XMLELEMENT(NAME \"pbcoreTitle\",
                        XMLATTRIBUTES('Series' as \"titleType\"),
                        initcap(trim(fi_location)) ),
                    CASE WHEN fi_title is not null THEN
                        XMLELEMENT(NAME \"pbcoreTitle\",
                            XMLATTRIBUTES(
                                'Interstitial' as \"titleType\",
                                'unpreserved case' as \"annotation\"
                            ),
                            initcap(trim(fi_title))
                        )
                    END,
                    CASE WHEN fi_title2 is not null THEN
                        XMLELEMENT(NAME \"pbcoreTitle\",
                            XMLATTRIBUTES(
                                'Subtitle' as \"titleType\",
                                'unpreserved case' as \"annotation\"
                            ),
                            initcap(trim(fi_title2))
                        )
                    END,
                    CASE WHEN fi_notes is not null THEN
                        XMLELEMENT(NAME \"pbcoreDescription\",
                            XMLATTRIBUTES('Broadcast Notes' as \"descriptionType\"),
                            concat_ws(' ',trim(fi_notes),trim(fi_notes2))
                        )
                    ELSE
                        XMLELEMENT(NAME \"pbcoreDescription\")
                    END,
                    filler_notes,
                    XMLELEMENT(NAME \"pbcoreInstantiation\",
                        XMLELEMENT(NAME \"instantiationIdentifier\",
                            XMLATTRIBUTES('Media ID' as \"source\"),
                        trim(fi_video_src) ),
                        XMLELEMENT(NAME \"instantiationLocation\", '' ),
                        XMLELEMENT(NAME \"instantiationDuration\", fi_length2 ),
                        CASE WHEN fi_length != fi_length2 THEN
                            XMLELEMENT(NAME \"instantiationAnnotation\",
                                XMLATTRIBUTES('minimum duration' as \"annotationType\"),
                                fi_length
                            )
                        END
                    ),
                    CASE WHEN fi_caption is not null THEN
                        XMLELEMENT(NAME \"pbcoreAnnotation\",
                            XMLATTRIBUTES(
                                'protrack:caption_type' as \"annotationType\"
                            ),
                            trim(fi_caption))
                    END,
                    (SELECT
                        XMLELEMENT(NAME \"pbcoreAnnotation\",
                            XMLATTRIBUTES(
                                'protrack:end_eligibility' as \"annotationType\"
                            ),
                            fillelig.fiel_end_date)
                    FROM fillelig
                    WHERE filler.fi_serial = fillelig.fiel_fi_id
                    ORDER BY fillelig.fiel_end_date DESC
                    LIMIT 1
                    )
                )
            ) as pbcore_filler_xml
        FROM filler
        LEFT JOIN (
            SELECT no_parent AS fi_serial,
                XMLELEMENT(NAME \"pbcoreDescription\",
                    XMLATTRIBUTES('Abstract' as \"descriptionType\"),
                    STRING_AGG( trim(no_text), ' ' ORDER BY no_sequence ASC)
                ) as filler_notes
            FROM notes
            WHERE no_location = 'promo'
            GROUP BY fi_serial
        ) o using (fi_serial)
        WHERE fi_video_src IN ( $(printf "'%s'," "$@" | sed 's/,$//') )
    ) AS pbcore_filler_result
"
}

if [[ "${CSV}" = "Y" ]] ; then
    _getpbcore "$@" |
    xml sel -N p="http://www.pbcore.org/PBCore/PBCoreNamespace.html" \
    -t -o "Series Name,Media ID,Episode Number,Episode Title,First Air Date,Episode Description" \
    -n -m "/p:pbcoreCollection/p:pbcoreDescriptionDocument" \
    -o "\"" -v "p:pbcoreTitle[@titleType='Series']|p:pbcoreTitle[@titleType='Program']" -o "\"," \
    -v "p:pbcoreInstantiation/p:instantiationIdentifier[@source='Media ID']" -o "," \
    -v "substring(p:pbcoreIdentifier[@source='NOLA Code'],7)" -o "," \
    -o "\"" -v "p:pbcoreTitle[@titleType='Episode']" -o "\"," \
    -o "\"" -v "p:pbcoreAssetDate[1]" -o "\"," \
    -o "\"" -v "p:pbcoreDescription[@descriptionType='PSIP']" -o "\"," \
    -n
else
    XML_RESULT="$(_getpbcore "$@")"
    if [[ -n "${XML_RESULT}" ]] ; then
        echo "${XML_RESULT}" | xml fo
    else
        >&2 echo "No result for ${@}"
    fi
fi
